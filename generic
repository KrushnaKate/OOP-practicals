import java.util.ArrayList;

public class generic {
    public static void main(String[] args) {
        // Sample collection of integers
        ArrayList<Integer> numbers = new ArrayList<>();
        numbers.add(12);
        numbers.add(7);
        numbers.add(22);
        numbers.add(5);
        numbers.add(11);
        numbers.add(33);
        numbers.add(121);
        numbers.add(131);

        // Count even numbers
        int evenCount = countElements(numbers, new PropertyChecker<Integer>() {
            @Override
            public boolean check(Integer element) {
                return element % 2 == 0;
            }
        });
        System.out.println("Number of even numbers: " + evenCount);

        // Count odd numbers
        int oddCount = countElements(numbers, new PropertyChecker<Integer>() {
            @Override
            public boolean check(Integer element) {
                return element % 2 != 0;
            }
        });
        System.out.println("Number of odd numbers: " + oddCount);

        // Count prime numbers
        int primeCount = countElements(numbers, new PropertyChecker<Integer>() {
            @Override
            public boolean check(Integer element) {
                return isPrime(element);
            }

            // Helper method to check if a number is prime
            private boolean isPrime(int n) {
                if (n <= 1) {
                    return false;
                }
                for (int i = 2; i <= Math.sqrt(n); i++) {
                    if (n % i == 0) {
                        return false;
                    }
                }
                return true;
            }
        });
        System.out.println("Number of prime numbers: " + primeCount);

        // Count palindromes
        int palindromeCount = countElements(numbers, new PropertyChecker<Integer>() {
            @Override
            public boolean check(Integer element) {
                return isPalindrome(String.valueOf(element));
            }

            // Helper method to check if a string is palindrome
            private boolean isPalindrome(String str) {
                int left = 0;
                int right = str.length() - 1;
                while (left < right) {
                    if (str.charAt(left) != str.charAt(right)) {
                        return false;
                    }
                    left++;
                    right--;
                }
                return true;
            }
        });
        System.out.println("Number of palindromes: " + palindromeCount);
    }

    // Generic method to count elements based on a property
    private static <T> int countElements(ArrayList<T> collection, PropertyChecker<T> checker) {
        int count = 0;
        for (T element : collection) {
            if (checker.check(element)) {
                count++;
            }
        }
        return count;
    }

    // Functional interface for property checking
    interface PropertyChecker<T> {
        boolean check(T element);
    }
}
